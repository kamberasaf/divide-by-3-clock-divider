`timescale 1ns / 1ps

module toggle_detector (
input logic clk,
input logic rst_n,
input logic data_in,
output logic data_out
);

logic prev_state=0;
logic toggle_detected;
assign toggle_detected = prev_state ^ data_in; 

always_ff @(posedge clk) begin
if (!rst_n) begin
    prev_state = 1'b0;
    data_out = 1'b0;
    end
else begin
    prev_state = data_in;
    data_out = toggle_detected;
    end
end

endmodule





////////////////////////////////////////

module tb_toggle_detector_dff;
    logic clk, rst_n, in, out;
    
    // Clock generation
    always #5 clk = ~clk;
    
    // Instantiate DUT
    toggle_detector dut (clk,rst_n,in,out);
    
    initial begin
        clk = 0;
        rst_n = 0;
        in = 0;
        
        #10 rst_n = 1;
        
        // Test sequence
        #10 in = 1;  // Toggle: 0->1, expect out=1
        #10 in = 1;  // No toggle: 1->1, expect out=0  
        #10 in = 0;  // Toggle: 1->0, expect out=1
        #10 in = 0;  // No toggle: 0->0, expect out=0
        #10 in = 1;  // Toggle: 0->1, expect out=1
        #10 in = 0;  // Toggle: 1->0, expect out=1
        #10 in = 1;  // Toggle: 0->1, expect out=1
        
        #20 $finish;
    end
    
    initial begin
        $monitor("Time=%0t rst_n=%b in=%b prev_in=%b out=%b", 
                 $time, rst_n, in, dut.prev_in, out);
    end
    
endmodule